<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC基础及对象详解</title>
      <link href="/2020/03/01/jdbc-ji-chu-ji-dui-xiang-xiang-jie/"/>
      <url>/2020/03/01/jdbc-ji-chu-ji-dui-xiang-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC：Java DataBase Connectivity Java数据库连接</p><ul><li><p>JDBC：SUN公司定义的一套操作所有关系型数据库的规则（接口），各个数据库厂商提供JDBC的实现类（数据库驱动），我们可以使用这套接口来编程，真正执行的代码是驱动jar包中的实现类。</p></li><li><p>使用JDBC  </p></li></ul><p>1.导入驱动jar包<br>2.注册驱动<br>3.获取数据库连接对象 Connection<br>4.定义sql<br>5.获取执行sql语句的对象 Statement<br>6.执行sql，接受返回结果<br>7.处理结果<br>8.释放资源</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册jdbc驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取数据库的连接对象</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db4"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义sql语句</span>        String sql<span class="token operator">=</span><span class="token string">"update stu set score = 56 where id = 1"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取执行对象statement</span>        Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果编译器报错了<br><img src="/2020/03/01/jdbc-ji-chu-ji-dui-xiang-xiang-jie/%E9%94%99%E8%AF%AF.png" alt="错误.png"></p><p>出现这个的原因是因为 mysql返回的时间总是有问题，比实际时间要早8小时。<br>在使用数据库加上代码</p><pre class=" language-java"><code class="language-java">Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db4?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8</p><h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><ul><li><p>DriverManager：驱动管理对象</p><ul><li>注册驱动（告诉程序应该使用哪一个数据库驱动）： com.mysql.cj.jdbc.Driver类中存在静态代码块调用DriverManager对象的registerDriver()函数来注册驱动</li><li>获取数据库连接：static Connection getConnection(String url,String user,String password);  <ul><li>rul：指定连接的路径（jdbc:mysql://ip地址(域名):端口号/数据库名称）  </li></ul></li></ul></li><li><p>Connection：数据库连接对象</p><ul><li>获取执行sql对象:  <ul><li>Statement createStatement()</li><li>PreparedStatement perparestatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：setAutoCommit(boolean autoCommit) :设置参数为false，则为开启事务</li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ul></li><li><p>Statement：执行sql对象</p><ul><li>boolean execute(String sql)：可以执行任意的sql</li><li>int execute(String sql)：执行DML(insert,update,delete)语句，DDL(create,alter,drop)语句，返回值为影响的表中数据行数</li><li>ResultSet executeQuery(String sql)：执行难DQL(select)语句</li></ul></li><li><p>ResultSet：结果集对象，封装查询结果</p><ul><li>boolean next()：游标向下移动一行,如果下一行有数据则返回true，否则返回false</li><li>getXXX(参数)：获取数据，如int getInt(),String getString()<ul><li>参数：int 代表列的编号（从1开始），String：代表列的名称</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>x<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>MysqlxDatatypes<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    *异常处理    *资源释放    *    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection root <span class="token operator">=</span>null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册数据库</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取数据库连接对象</span>            root <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db4?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"9624988464..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from stu "</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行sql对象</span>            st <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql,得到结果集对象</span>            resultSet <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析结果集</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> score <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="抽取JDBC工具类：JDBCUtils"><a href="#抽取JDBC工具类：JDBCUtils" class="headerlink" title="抽取JDBC工具类：JDBCUtils"></a>抽取JDBC工具类：JDBCUtils</h2><ul><li><p>目的：简化书写，获取连接对象及释放资源的代码大量且重复</p></li><li><p>分析：</p><ul><li>抽取注册驱动</li><li>抽取一个方法获取连接对象<ul><li>配置文件  jdbc.properties</li></ul></li><li>抽取一个方法释放资源</li></ul><hr></li><li><p>jdbc.properties</p></li></ul><pre class=" language-txt"><code class="language-txt">driver=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/db4?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=falseuser=rootpassword=9624988464...</code></pre><ul><li>JDBCUtils.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读取配置文件</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/JDBC/jdbc.perperties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取参数</span>            driver<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement st<span class="token punctuation">,</span>Connection co<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>co <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                co<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet re<span class="token punctuation">,</span>Statement st<span class="token punctuation">,</span> Connection co<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                re<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>co <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                co<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>JDBCDemo4.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo4</span><span class="token operator">&lt;</span>list<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JdbcDemo4 jdbcDemo4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> jdbcDemo4<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>students<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>students<span class="token operator">></span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动,获取连接对象</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from stu"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析结果</span>            students st <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> score <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date birthday <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">students</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>                stus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> stus<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解实战：简单的测试框架</title>
      <link href="/2020/02/22/zi-ding-yi-zhu-jie-shi-zhan-jian-dan-de-ce-shi-kuang-jia/"/>
      <url>/2020/02/22/zi-ding-yi-zhu-jie-shi-zhan-jian-dan-de-ce-shi-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="注解基础"><a href="#注解基础" class="headerlink" title="注解基础"></a>注解基础</h2><p>注解的本质是一个接口，该接口默认继承Annotation接口</p><ul><li>接口里面的成员方法称为注解的属性</li><li>定义了属性，要在使用的时候给属性赋值</li><li>如果定义属性时使用default关键字给属性默认初始值，则可以不进行赋值</li><li>若只有一个属性且名为value，则使用时可以直接写值</li><li>数组赋值时使用 { } 包裹，数组只有一个值时可以不用 { }</li></ul><p>属性返回值的类型限制：</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul><p>1.JDK中预定义注解</p><ul><li>@Override ：继承父类接口</li><li>@Deprecated ：表示已过时的内容</li><li>@SuppressWarning ：压制警告，一般传递参数为all，SuppressWarning(“all”)</li></ul><p>2.自定义注解</p><ul><li>元注解：用于描述注解的注解<ul><li>@Target ：描述注解能够作用的位置</li><li>@Retention ： 描述注解被保留的阶段</li><li>@Documented ： 描述注解是否被抽取到api文档中</li><li>@Inherited ： 描述注解是否被子类继承</li></ul></li></ul><h2 id="利用注解来测试所写的方法中出现的异常"><a href="#利用注解来测试所写的方法中出现的异常" class="headerlink" title="利用注解来测试所写的方法中出现的异常"></a>利用注解来测试所写的方法中出现的异常</h2><p>在这里注解只是作为标识，检测程序只对带有Check的函数进行检测<br>测试结果：<br><img src="/2020/02/22/zi-ding-yi-zhu-jie-shi-zhan-jian-dan-de-ce-shi-kuang-jia/bug.png" alt="bug.png"></p><ul><li>写好我们需要测试的类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> check<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1+0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1*0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1/0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>自定义Check注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> check<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>编写测试主函数</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> check<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *检测被加了Check注解的方法 * 并把异常信息输出 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCheck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Calculator c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取字节码文件</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取成员方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录出现异常的次数</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"bug.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method<span class="token operator">:</span>methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断方法上是否有Check注解</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Check<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是，运行</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//捕获异常</span>                    <span class="token comment" spellcheck="true">//记录文件信息</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"出现了异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的名称："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的原因："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"一共出现了"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"次异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Java </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考复习</title>
      <link href="/2020/02/06/ruan-kao-fu-xi/"/>
      <url>/2020/02/06/ruan-kao-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成与体系结构"><a href="#计算机组成与体系结构" class="headerlink" title="计算机组成与体系结构"></a>计算机组成与体系结构</h1><h2 id="计算机体系结构分类——Flynn"><a href="#计算机体系结构分类——Flynn" class="headerlink" title="计算机体系结构分类——Flynn"></a>计算机体系结构分类——Flynn</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB-Flynn.png" alt="计算机体系结构分类-Flynn.png"></p><ul><li>单指令流单数据流：单处理器系统，老式PC机，多见于单片机系统。</li><li>阵列处理机（典型单指令流多数据流代表）：适合处理数组类型的操作，例如：一条加法指令通过输入不同数据来得到一组结果。</li><li>多指令单数据流是一种理论层次的模型。</li><li>多指令流多数据流：当前很常见，例如集群式。</li></ul><h2 id="CISC与RISC"><a href="#CISC与RISC" class="headerlink" title="CISC与RISC"></a>CISC与RISC</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/CISC%E4%B8%8ERISC.png" alt="CISC与RISC.png"></p><ul><li>CISC：在计算机还没普及的情况下提出来的，计算机属于奢饰品，找厂商定制计算机，从硬件到指令系统都是定制，要进行什么样的业务处理就设计什么样的指令。根据不同的用户就会有不同的指令，而且指令的数量会相当多。</li></ul><h2 id="流水线——概念"><a href="#流水线——概念" class="headerlink" title="流水线——概念"></a>流水线——概念</h2><ul><li>数字1代表第一个指令，数字2代表第二个指令</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF.png" alt="流水线.png"></p><ul><li>流水线的计算</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AE%A1%E7%AE%97.png" alt="流水线计算.png"></p><ul><li>流水线吞吐率的计算</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%90%9E%E5%90%90%E7%8E%87%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt="流水线吞吐的率计算.png"></p><ul><li>流水线的加速比</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E5%8A%A0%E9%80%9F%E6%AF%94.png" alt="流水线的加速比.png"></p><ul><li>流水线的效率</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%95%88%E7%8E%87.png" alt="流水线的效率.png"></p><h2 id="层次化存储结构"><a href="#层次化存储结构" class="headerlink" title="层次化存储结构"></a>层次化存储结构</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%B1%82%E6%AC%A1%E5%8C%96%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="层次化存储结构.png"></p><ul><li>Cache不是必须的，CPU可以直接与内存进行交换，但是没有Cache的话，因为局部性原理（如循环体中的程序会暂时保存在Cache中，以便CPU快速读取）速度会极慢。</li><li>按内容存取区别按地址存取</li></ul><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/Cache.png" alt="Cache.png"></p><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86.png" alt="局部性原理.png"></p><ul><li>工作集原理：工作集是进程运行时被频繁访问的页面的集合。</li></ul><h2 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h2><ul><li>主存分类</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E4%B8%BB%E5%AD%98%E5%88%86%E7%B1%BB.png" alt="主存分类.png"></p><ul><li>主存编址</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E4%B8%BB%E5%AD%98%E7%BC%96%E5%9D%80.png" alt="主存编址.png"></p><h2 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84.png" alt="磁盘结构.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/%E7%A3%81%E7%9B%98%E8%AF%95%E9%A2%98.png" alt="磁盘试题.png"></p><h2 id="计算机总线"><a href="#计算机总线" class="headerlink" title="计算机总线"></a>计算机总线</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%80%BB%E7%BA%BF.png" alt="总线.png"></p><h2 id="系统可靠性分析——串联系统与并联系统"><a href="#系统可靠性分析——串联系统与并联系统" class="headerlink" title="系统可靠性分析——串联系统与并联系统"></a>系统可靠性分析——串联系统与并联系统</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F.png" alt="串联系统.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F.png" alt="并联系统.png"></p><h2 id="系统可靠性分析——n模冗余系统与混合系统"><a href="#系统可靠性分析——n模冗余系统与混合系统" class="headerlink" title="系统可靠性分析——n模冗余系统与混合系统"></a>系统可靠性分析——n模冗余系统与混合系统</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%86%97%E4%BD%99%E7%B3%BB%E7%BB%9F.png" alt="冗余系统.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B7%B7%E5%90%88%E7%B3%BB%E7%BB%9F.png" alt="混合系统.png"></p><h2 id="差错控制——CRC与海明校验码"><a href="#差错控制——CRC与海明校验码" class="headerlink" title="差错控制——CRC与海明校验码"></a>差错控制——CRC与海明校验码</h2><p><img src="/2020/02/06/ruan-kao-fu-xi/%E7%BC%96%E7%A0%81.png" alt="编码.png"></p><ul><li>循环校验码CRC</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%A8%A12%E9%99%A4%E6%B3%95.png" alt="模2除法.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/CRC%E7%BC%96%E7%A0%81.png" alt="CRC编码.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记：自动化构建工具Maven</title>
      <link href="/2020/01/29/bi-ji-zi-dong-hua-gou-jian-gong-ju-maven/"/>
      <url>/2020/01/29/bi-ji-zi-dong-hua-gou-jian-gong-ju-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h2><ul><li>借助Maven可以将一个项目拆分为多个工程，避免因为项目太庞大不好管理和分工合作</li><li>借助Maven可以将jar包紧紧保存在“仓库”中，有需要工程“引用”这个文件接口，并不需要真的把jar包复制过来</li><li>下载jar包（可以以一种规范的方式下载jar包，因为所有的知名框架或者第三方工具的jar包以及按照统一的规范的方式下载jar包，内容也是可靠的）</li><li>Maven会自动将被依赖的jar包导入进来</li></ul><h2 id="构建过程中的环节"><a href="#构建过程中的环节" class="headerlink" title="构建过程中的环节"></a>构建过程中的环节</h2><ul><li>清理：将以前编译的得到的旧的class字节码文件删除，为下一次编译做准备</li><li>编译：将JAVA源程序编译成class字节码文件</li><li>测试：自动测试，自动调用junit程序</li><li>报告：测试程序执行的结果</li><li>打包：动态web工程打包成war包，java工程打包成jar包</li><li>安装：Maven特定的概念－－将打包得到的文件复制到“仓库”中指定位置</li><li>部署：将动态web工程生成war包复制到servlet容器的指定目录下，使其可以运行</li></ul><h2 id="Maven的核心概念"><a href="#Maven的核心概念" class="headerlink" title="Maven的核心概念"></a>Maven的核心概念</h2><ul><li><strong>约定的目录结构</strong></li><li><strong>POM</strong></li><li><strong>坐标</strong></li><li><strong>依赖</strong></li><li>仓库</li><li>生命周期/插件/目标</li><li>继承</li><li>聚合</li></ul><h2 id="约定的目录结构"><a href="#约定的目录结构" class="headerlink" title="约定的目录结构"></a>约定的目录结构</h2><ul><li>根目录：工程名</li><li>src目录：源码</li><li>pom.xml文件：Maven工程的核心配置文件</li><li>main目录：存放主程序</li><li>test目录：存放测试程序</li><li>java目录：存放java源文件</li><li>resource目录：存放框架或其他工具的配置文件</li></ul><h3 id="如果想要自己定义的东西让工具知道，有两种办法"><a href="#如果想要自己定义的东西让工具知道，有两种办法" class="headerlink" title="如果想要自己定义的东西让工具知道，有两种办法"></a>如果想要自己定义的东西让工具知道，有两种办法</h3><ul><li>以配置的方式告诉框架</li><li>遵守框架内部已经存在的约定</li><li>约定＞配置＞编码</li></ul><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><ul><li>mvn clean：清理</li><li>mvn compile：编译主程序</li><li>mvn test-compile：编译测试程序</li><li>mvn test：执行测试</li><li>mvn package：打包</li><li>mvn install：安装</li><li>mvn site：生成站点</li></ul><h2 id="关于联网的问题"><a href="#关于联网的问题" class="headerlink" title="关于联网的问题"></a>关于联网的问题</h2><ul><li>Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含在Maven的核心程序中。</li><li>在我们执行的Maven命令中需要用到某些插件时，Maven的核心程序会首先到本地仓库中寻找。</li><li>本地仓库的默认位置：[系统中当前用户的家目录]\.m2\repository</li><li>Maven核心程序如果在本地仓库中找不到需要的插件，那么它会链接外网，到中央仓库去下载。如果此时无法连接外网，则构建失败。</li><li>修改默认本地仓库的位置可以让Maven的核心程序找到我们事先准备好的目录</li></ul><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><ul><li>含义：Project Object Model：项目对象模型<br>类似 DOM ：Document Object Model：文档对象类型</li><li>pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。需要程度相当于web.xml对于动态web工程</li></ul><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><p>含义：使用三个向量在仓库中唯一定位一个Maven工程</p><ul><li>groupid:公司或组织域名倒序+项目名</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupid</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupid</span><span class="token punctuation">></span></span></code></pre><ul><li>artifactid：模块名</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactid</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span><span class="token punctuation">></span></span></code></pre><ul><li>version:版本</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><h3 id="Maven-工程的坐标与仓库中路径的对应关系"><a href="#Maven-工程的坐标与仓库中路径的对应关系" class="headerlink" title="Maven 工程的坐标与仓库中路径的对应关系"></a>Maven 工程的坐标与仓库中路径的对应关系</h3><ul><li>坐标：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupid</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactid</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><p>对应文件：</p><p>org/springfarmework/spring-core/4.0.00RELEASE/spring-core-4.0.0.RELEASE.jar</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="仓库中保存的内容：Maven工程"><a href="#仓库中保存的内容：Maven工程" class="headerlink" title="仓库中保存的内容：Maven工程"></a>仓库中保存的内容：Maven工程</h3><ul><li>Maven自身所需要的插件</li><li>第三方框架或工具的jar包</li><li>我们自己开发的Maven工程</li></ul><h3 id="仓库的分类"><a href="#仓库的分类" class="headerlink" title="仓库的分类"></a>仓库的分类</h3><p>1.本地仓库：当前电脑上部署的目录，为当前电脑上所有Maven工程服务。</p><p>2.远程仓库</p><ul><li>私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务。</li><li>中央仓库：架设在Internet上，为全世界所有的Maven工程服务。</li><li>中央仓库镜像：为了分担中央仓库的流量，提升用户的访问速度。</li></ul><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>1.Maven解析依赖信息时会到本地仓库中查找被依赖的jar包。</p><ul><li>对于我们自己开发的Maven工程，使用 mvn install命令安装后就可以进入仓库。</li></ul><p>2.依赖的常用范围</p><ul><li>compile范围依赖：对主程序有效、对测试程序有效、参与打包。</li><li>test范围依赖：对主程序无效、对测试程序有效、不产与打包。（典型例子：junit）</li><li>provided范围依赖：对主程序有效、对测试程序有效、不参与打包、不参与部署。（典型例子：servlet-api）</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>各个构建环节执行的顺序：不能打乱顺序，必须按照规定的争取顺序来进行。</li><li>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</li><li>Maven的核心程序为了更好的实现自动化，按照这样的特点执行生命周期中的各个阶段： 不论现在要执行生命周期中的哪一个阶段，都是从生命周期最初的位置执行。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 构建 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/29/hello-world/"/>
      <url>/2020/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
