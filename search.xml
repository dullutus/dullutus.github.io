<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java跳出多重循环</title>
      <link href="/2020/05/09/java-tiao-chu-duo-chong-xun-huan/"/>
      <url>/2020/05/09/java-tiao-chu-duo-chong-xun-huan/</url>
      
        <content type="html"><![CDATA[<p>在最外层循环前加一个标记如 A，然后用 break A;可以跳出多重循环。（Java 中支持带标签的 break 和 continue 语句，作用有点类似于 C 和 C++中的 goto 语句，但是就像要避免使用 goto 一样，应该避免使用带标签的 break 和 continue，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用）。</p><pre class=" language-java"><code class="language-java">        String a1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        String b1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        A<span class="token operator">:</span>   <span class="token comment" spellcheck="true">//标记A</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a1 <span class="token operator">=</span> <span class="token string">"外层循环第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"层"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                b1 <span class="token operator">=</span> <span class="token string">"内层循环第"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"层"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> j <span class="token operator">&amp;</span> <span class="token number">2</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span> A<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//跳出标记A</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token operator">+</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用try/catch强制跳出循环：</p><pre class=" language-java"><code class="language-java">        String a3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        String b3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a3 <span class="token operator">=</span> <span class="token string">"外层循环第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"层"</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b3 <span class="token operator">=</span> <span class="token string">"内层循环第"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"层"</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> j <span class="token operator">&amp;</span> <span class="token number">2</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token operator">+</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个对象值相同却有可能有不同的hashCode</title>
      <link href="/2020/04/09/liang-ge-dui-xiang-zhi-xiang-tong-que-you-ke-neng-you-bu-tong-de-hashcode/"/>
      <url>/2020/04/09/liang-ge-dui-xiang-zhi-xiang-tong-que-you-ke-neng-you-bu-tong-de-hashcode/</url>
      
        <content type="html"><![CDATA[<p>hashCode是所有java对象的固有方法，如果不重载的话，返回的实际上是该对象在jvm的堆上的内存地址，而不同对象的内存地址肯定不同，所以这个hashCode也就肯定不同了。如果重载了的话，由于采用的算法的问题，有可能导致两个不同对象的hashCode相同。  </p><p>Java 对于 eqauls 方法和 hashCode 方法是这样规定的：(1)如果两个对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；(2)如果两个对象的 hashCode 相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 Set 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。  </p><p>在集合中，set集合是不允许元素重复的，当新添加一个元素的时候首先调用这个元素的hashCode方法，得到的哈希码作为这个元素的存储地址，如果这个地址上没有元素，则直接存储在这个地址上；如果这个地址上有元素，在调用equals方法比较，相同则不再存储，不相同的话就会产生冲突，会产生一个链接表，将这两个元素串起来放在同一个哈希码指定的位置上，而实际上会尽量避免哈希冲突。如果直接调用equals方法，当数据量过大时，每次都会调用一次equals方法，效率低。用hashCode方法比较减少对象比较次数，提高查找效率。  </p><p> 哈希表是结合了直接寻址和链式寻址两种方式，所需要的就是将需要加入哈希表的数据首先计算哈希值，其实就是预先分个组，然后再将数据挂到分组后的链表后面，随着添加的数据越来越多，分组链上会挂接更多的数据，同一个分组链上的数据必定具有相同的哈希值，java中的hash函数返回的是int类型的，也就是说，最多允许存在2^32个分组，也是有限的，所以出现相同的哈希码就不稀奇了。</p><hr><p>《Java 编程思想》以及《重构：改善既有代码质量》中是这样介绍 equals 方法的：<br>首先 equals 方法必须满足自反性（x.equals(x)必须返回 true）、对称性（x.equals(y)返回 true 时，y.equals(x)也必须返回 true）、传递性（x.equals(y)和 y.equals(z)都返回 true 时，x.equals(z)也必须返回 true）和一致性（当x 和 y 引用的对象信息没有被修改时，多次调用 x.equals(y)应该得到同样的返回值），而且对于任何非 null 值的引用 x，x.equals(null)必须返回 false。实现高质量的 equals 方法的诀窍包括：1. 使用==操作符检查”参数是否为这个对象的引用”；2. 使用 instanceof 操作符检查”参数是否为正确的类型”；3. 对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；4. 编写完 equals 方法后，问自己它是否满足对称性、传递性、一致性；5. 重写 equals 时总是要重写 hashCode；6. 不要将 equals 方法参数中的 Object 对象替换为其他的类型，在重写时不要忘掉@Override 注解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clone对象</title>
      <link href="/2020/04/05/clone-dui-xiang/"/>
      <url>/2020/04/05/clone-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>在实际编程过程中，我们常常要遇到这种情况：有一个对象 A，在某一时刻 A 中已经包含了一些有效值，此时可能会需要一个和 A 完全相同新对象 B，并且此后对 B 任何改动都不会影响到 A 中的值，也就是说，A 与 B 是两个独立的对象，但 B 的初始值是由 A 对象确定的。在 Java 语言中，用简单的赋值语句是不能满足这种需求的。要满足这种需求虽然有很多途径，但实现 clone（）方法是其中最简单，也是最高效的手段。</p><h2 id="new-一个对象的过程和clone-一个对象的过程区别"><a href="#new-一个对象的过程和clone-一个对象的过程区别" class="headerlink" title="new 一个对象的过程和clone 一个对象的过程区别"></a>new 一个对象的过程和clone 一个对象的过程区别</h2><p>new 操作符是根据后面的类型来分配内存空间再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。<br>clone 在第一步是和 new 相似的，都是分配内存，调用 clone 方法时，分配的内存和原对象（即调用 clone 方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域，填充完成之后，clone 方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。</p><h2 id="Clone对象的使用"><a href="#Clone对象的使用" class="headerlink" title="Clone对象的使用"></a>Clone对象的使用</h2><h3 id="复制对象和复制引用的区别"><a href="#复制对象和复制引用的区别" class="headerlink" title="复制对象和复制引用的区别"></a>复制对象和复制引用的区别</h3><pre class=" language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p1 <span class="token operator">=</span> p<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以把这种现象叫做引用的复制。上面代码执行完成之后， 内存中的情景如下图所示：<br><img src="/2020/04/05/clone-dui-xiang/%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8.png" alt="引用内存模型"></p><p>而下面的代码是真真正正的克隆了一个对象。</p><pre class=" language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p1 <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码执行完成后， 内存中的情景如下图所示：<br><img src="/2020/04/05/clone-dui-xiang/%E5%AF%B9%E8%B1%A1clone%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="对象clone内存模型"></p><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p>由于 age 是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个 4 字节的整数值拷贝过来就行。但是 name是 String 类型的， 它只是一个引用， 指向一个真正的 String 对象，那么对它的拷贝有两种方式： 直接将原对象中的 name 的引用值拷贝给新对象的 name 字段， 或者是根据原 Person 对象中的 name 指向的字符串对象创建一个新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的 Person 对象的 name 字段。这两种拷贝方式分别叫做浅拷贝和深拷贝。深拷贝和浅拷贝的原理如下图所示：</p><p><img src="/2020/04/05/clone-dui-xiang/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="深拷贝和浅拷贝"></p><p>如果想要深拷贝一个对象，这个对象必须要实现 Cloneable 接口，实现 clone方法，并且在 clone 方法内部，把该对象引用的其他对象也要 clone 一份，这就要求这个被引用的对象必须也要实现Cloneable 接口并且实现 clone 方法。那么，按照上面的结论，实现以下代码 Body 类组合了 Head 类，要想深拷贝Body 类，必须在 Body 类的 clone 方法中将 Head 类也要拷贝一份。代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Body</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Head head<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Body</span><span class="token punctuation">(</span>Head head<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Body newBody <span class="token operator">=</span>  <span class="token punctuation">(</span>Body<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newBody<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>Head<span class="token punctuation">)</span> head<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newBody<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>        <span class="token keyword">public</span>  Face face<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Body body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Head</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Face</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Body body1 <span class="token operator">=</span> <span class="token punctuation">(</span>Body<span class="token punctuation">)</span> body<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body == body1 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>body <span class="token operator">==</span> body1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body.head == body1.head : "</span> <span class="token operator">+</span>  <span class="token punctuation">(</span>body<span class="token punctuation">.</span>head <span class="token operator">==</span> body1<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request&amp;Response</title>
      <link href="/2020/03/14/request-response/"/>
      <url>/2020/03/14/request-response/</url>
      
        <content type="html"><![CDATA[<h2 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h2><p>  <img src="/2020/03/14/request-response/%E5%8E%9F%E7%90%86.png" alt="原理"><br>  request和response对象是由服务器创建，我们来使用，request对象是来获取请求消息，response对象是来响应消息</p><h2 id="Resquest功能"><a href="#Resquest功能" class="headerlink" title="Resquest功能"></a>Resquest功能</h2><ul><li><p>获取请求消息数据</p><ul><li><p>获取请求行数据</p><ul><li>获取请求方式：String getMethod()</li><li>获取虚拟目录：String getContextPath()</li><li>获取Servlet路径：String getServletPath()</li><li>获取get方法请求参数：String getQueryString()</li><li>获取请求URI/URL：String getRequestURI() / StringBuffer getRequestURL()</li><li>获取协议及版本：String getProtocol()</li><li>获取客户机IP地址：String getRemoteAddr()</li></ul></li><li><p>获取请求头数据</p><ul><li>String getHeader(String name)：通过请求偷的名称来获取请求头的值</li><li>Enumeration&lt;String&gt; getHeaderNames()：获取所有请求头的名称</li></ul></li><li><p>获取请求体数据：<br>请求体：只有POST请求方式才有请求体，在请求体中封装了POST请求的参数<br>使用：获取流对象+从流中拿数据</p><ul><li>BufferedReader getReader()：获取字符操作流才能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节操作流，可以操作所有类型数据</li></ul></li></ul></li><li><p>其他功能</p><ul><li><p>获取请求参数通用方式（不论get/post）</p><ul><li><p>String getParameter(String name)：根据参数名称获取参数值</p></li><li><p>String[] getpParameterValues(String name)：根据参数名称获取参数值的数组（适用于复选框）</p></li><li><p>Enumeration&lt;String&gt; getParameterNames()：获取所有请求的参数名称</p></li><li><p>Map&lt;String,String[]&gt; getParameterMap()：获取所有参数的map集合</p></li><li><p><strong>中文乱码问题</strong></p><ul><li>get方式：tomcat8已经将get方式的乱码问题解决了</li><li>post方式：由于获取参数的方式是使用流来获取，所有需要设置流的编码与html页面编码一致<br><code>request.setCharacterEncoding(&quot;utf-8&quot;);  //以utf-8编码为例</code></li></ul></li></ul></li><li><p>请求转发：一种在服务器内部的资源跳转方式<br>步骤：</p><ul><li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li><li>使用RequestDispatcher对象来进行转发：forward(ServletRequest request，ServletRespnse response)</li></ul><p>特点：</p><ul><li>浏览器地址栏路径不会发生变化</li><li>只能转发到当前服务器内部资源中</li><li>整个访问虽然访问了多个资源，但是只有一次请求</li></ul></li><li><p>共享数据：</p><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ul><li>void setAttribute(String name,Object obj)：存储数据</li><li>Object getAttribute(String name)：通过键获取值</li><li>void removeAttribute(String name)：通过键移除键值对</li></ul></li></ul></li><li><p>获取ServletContext</p><ul><li>ServletContext getServletContext()</li></ul></li></ul></li></ul><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><ul><li><p>功能：设置响应消息</p><ul><li>设置状态码：setStatus(int sc)</li><li>设置响应头：setHeader(String name,String value)</li><li>设置响应体：<ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul></li></ul></li><li><p>案例：</p><ul><li>完成重定向（资源跳转）</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式一</span><span class="token comment" spellcheck="true">//1设置状态码302</span>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2设置响应头location（资源地址）</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">,</span><span class="token string">"地址"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"地址"</span><span class="token punctuation">)</span></code></pre><ul><li><p>重定向（redirect）的特点：</p><ul><li>地址栏发生变化</li><li>重定向可以访问其他站点的资源</li><li>重定向是两次请求，不能使用request对象来共享数据</li></ul></li><li><p>转发（forward）的特点：</p><ul><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ul></li><li><p>路径问题</p><ul><li>相对路径:通过相对路径不可以确定唯一资源<br>在访问相对路径时路径前面不添加“ / ”，以“ . ”开头。例如：<br>./  表示当前目录（也可以省略不写）<br>../  表示上一级目录</li><li>绝对路径：通过绝对路径可以确定唯一资源<br>绝对路径以“ / ”开头</li><li>绝对路径与相对路径的使用：<br>给客户端浏览器使用的地址用绝对路径（如表单，超链接，重定向）<br>给服务器使用的地址用相对路径（如转发路径）</li></ul></li></ul></li></ul><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><p>ServletContext对象代表整个web应用，可以和程序的容器来通信</p><ul><li><p>获取：request.getServletContext();<br>若继承了HttpServlet类也可用 this.getServletContext();</p></li><li><p>功能：</p><ul><li><p>获取MIME类型：<br>MIME类型是在互联网通信过程中定义的一种文件数据类型<br>MIME数据类型的格式： 大类型/小类型 ， text/html ， image/jepg<br>获取： String getMimeType(String file)</p></li><li><p>域对象：共享数据</p></li><li><p>获取文件的真实（服务器）路径</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2020/03/13/servlet/"/>
      <url>/2020/03/13/servlet/</url>
      
        <content type="html"><![CDATA[<ul><li>Servlet就是一个接口，定义了Java类能被浏览器访问到(tomact识别)的规则</li></ul><h2 id="使用servlet"><a href="#使用servlet" class="headerlink" title="使用servlet"></a>使用servlet</h2><ul><li><p>定义类，来实现servlet接口</p><p>  <code>public class ServletDemo01 implements Servlet</code></p></li><li><p>实现接口中的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo01</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置Servlet</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.monsterhub.ServletDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ul><li><p>当服务器接收到客户端的请求后，会解析请求url路径，获取访问Servlet的资源路径</p></li><li><p>查找web.xml文件，是否有对应的&lt;url-pattern&gt;标签体内容</p></li><li><p>tomcat通过标签体的内容找到全类名，利用反射机制将字节码文件加载进内存，并创建其对象</p></li><li><p>调用其方法</p></li><li><p><strong>Servlet3.0可以用在类上添加@WebServlet(“资源路径”)注解，来代替配置web.xml文件</strong></p></li></ul><h2 id="Servlet中的方法"><a href="#Servlet中的方法" class="headerlink" title="Servlet中的方法"></a>Servlet中的方法</h2><ul><li>init 初始化方法，servlet被创建时执行一次</li><li>ServletConfig 获取Servlet配置对象</li><li>service 服务方法，提供服务</li><li>getServletInfo 获取Servlet的一些信息</li><li>destroy 服务器正常关闭时调用</li></ul><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><ul><li><p>被创建（执行init方法）</p><ul><li><p>默认情况下配置文件标签&lt;load-on-starup&gt;值为负数，servlet第一次被访问时，创建servlet</p></li><li><p>若配置文件标签&lt;load-on-starup&gt;值为正数，则服务器启动时创建servlet</p><ul><li><strong>Servlet的init方法只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</strong><ul><li>多个用户同时访问时就可能发生安全问题，<strong>所以尽量不要在Servlet中定义成员变量，即使定义了成员变量也不要对其修改值</strong></li></ul></li></ul></li></ul></li><li><p>提供服务（执行service方法）</p><ul><li>每次访问Servlet时，Servlet方法都会被调用一次</li></ul></li><li><p>被销毁（执行destory方法）</p><ul><li>Servlet被销毁时执行，服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ul><h2 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h2><ul><li><p>GenericServlet：是继承Servlet接口的抽象类，将Servlet接口中其他的方法都做了默认的空实现，只将service方法作为抽象方法，所以定义类时继承该类则只需实现service方法即可</p></li><li><p>HttpServlet：继承于GenericServlet的抽象类，对http协议进行简单的封装，简化操作，继承该抽象类需要复写doGet/doPost方法</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xml解析</title>
      <link href="/2020/03/12/xml-jie-xi/"/>
      <url>/2020/03/12/xml-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>XML 指可扩展标记语言，可以自定义标签,被设计用来传输和存储数据</p><ul><li>解析（读取）：操作xml文档，将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ul><h2 id="解析xml的方式"><a href="#解析xml的方式" class="headerlink" title="解析xml的方式"></a>解析xml的方式</h2><ul><li><p>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树</p><ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存大</li></ul></li><li><p>SAX：逐行读取，基于事件驱动的</p><ul><li>优点：不占内存</li><li>缺点：只能读取，不能删改</li></ul></li></ul><h2 id="xml常见的解析器"><a href="#xml常见的解析器" class="headerlink" title="xml常见的解析器"></a>xml常见的解析器</h2><ul><li>JAXP：SUN公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J</li><li>Jsoup：是一款html解析器，可以直接解析某个url地址，提供了一套非常省力的API，可以通过dom，JQuery的操作方式来取出数据</li><li>PULL：Android操作系统内置的解析器，sax方式</li></ul><h2 id="Jsoup使用"><a href="#Jsoup使用" class="headerlink" title="Jsoup使用"></a>Jsoup使用</h2><ul><li>导入jar包</li><li>获取Document对象</li><li>获取对应的Element对象</li><li>获取数据</li></ul><h2 id="对象详解"><a href="#对象详解" class="headerlink" title="对象详解"></a>对象详解</h2><ul><li><p>Jsoup：工具类，Jsoup.parse()可以解析html文档返回Document对象</p></li><li><p>Document：文档对象。代表内存中的dom树</p></li><li><p>Elements：元素Element对象的集合，继承于ArrayList&lt;Element&gt;</p></li><li><p>Element:元素对象</p><ul><li>获取子元素</li><li>获取属性值<ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li>获取文本内容<ul><li>String text()：获取所有纯文本内容</li><li>String html()：获取标签体所有内容（包括子标签的字符串内容）</li></ul></li></ul></li><li><p>Node：节点对象</p><ul><li>是Document和Element的父类</li></ul></li></ul><h2 id="Jsoup快捷查询方式"><a href="#Jsoup快捷查询方式" class="headerlink" title="Jsoup快捷查询方式"></a>Jsoup快捷查询方式</h2><ul><li><p>selector：选择器</p><ul><li>使用方法：public Element select(String cssQuery) 语法参考Selector类中定义的语法（查看文档）</li></ul></li><li><p>XPath：XPath即为xml路径语言，它是一种用来确定xml（标准通用标记语言的子集）文档中某部分位置的语言</p><ul><li>使用XPath需要导入额外的jar包</li><li>查询W3Cschool的参考手册，使用xpath的语法完成查询</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池</title>
      <link href="/2020/03/05/shu-ju-ku-lian-jie-chi/"/>
      <url>/2020/03/05/shu-ju-ku-lian-jie-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>  连接池基本的思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，当用户需要访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。使用完毕后，用户也并非将连接关闭，而是将连接放回连接池中，以供下一个请求访问使用。而连接的建立、断开都由连接池自身来管理。同时，还可以通过设置连接池的参数来控制连接池中的初始连接数、连接的上下限数以及每个连接的最大使用次数、最大空闲时间等等。也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li><p>节约资源：系统初始化好之后，连接池则被创建，当用户来访问数据库时，可以直接从连接池里取得连接对象，这样就避免了频繁的创建数据库连接、释放数据库连接，从而避免了资源的浪费</p></li><li><p>提高用户的访问效率：从连接池里取得连接对象，要比重新申请连接快得多；释放资源并不是关闭连接，而是将连接对象归还给连接池，以便下次使用</p></li><li><p>基本配置文件的参数</p><ul><li>初始化连接数：初始化程序是连接池里连接的个数</li><li>最大连接数：连接池里能保存的最大连接数</li><li>最大等待时间：申请连接时超过最大等待时间则申请失败</li></ul></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>标准接口：DataSource（javax.sql包下），具体的实现类是由数据库厂商实现</p><ul><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close() 如果连接对象是从连接池中获得，那么此方法不再关闭连接，而是归还链接</li></ul></li></ul></li><li><p>使用 C3P0 数据库连接池</p><ul><li><p>导入jar包 (两个) c3p0-0.9.5.2.jar 和 mchange-commons-java-0.2.12.jar</p></li><li><p>定义配置文件：</p><ul><li><p>名称： c3p0.properties 或者 c3p0-config.xml</p></li><li><p>路径：直接将文件放在src目录下即可。</p></li><li><p>创建核心对象——数据库连接池对象 ComboPooledDataSource</p></li><li><p>获取连接： getConnection</p><ul><li>创建线程池对象:DataSource ds  = new ComboPooledDataSource();</li><li>获取连接对象Connection conn = ds.getConnection();</li></ul></li></ul></li></ul></li><li><p>Druid：数据库连接池，由阿里巴巴提供</p><ul><li>导入jar包</li><li>定义配置文件<ul><li>是Properties形式的</li><li>可以放在任意目录叫任意名称</li></ul></li><li>加载配置文件</li><li>获取连接池对象：通过工厂来获取 DruidDataSourceFactory.createDataSource(),需要传入Properties对象</li><li>获取连接对象</li></ul></li></ul><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li><p>Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化JDBC开发  </p></li><li><p>无需进行申请连接和释放连接</p></li><li><p>步骤：</p><ul><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(DataSource ds);</li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD操作</p><ul><li><p>updata()：执行DML语句。（增删改查）</p></li><li><p>queryForMap()：查询结果将结果集封装为map集合，将列名作为key，记录作为value</p><ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li><p>queryForList()：查询结果将结果集封装为list集合</p><ul><li>注意：将每一条记录都封装成Map集合，再将Map集合装载到List集合中</li></ul></li><li><p>query()：查询结果将结果集封装为JavaBean对象</p><ul><li>query的参数：（sql，RowMapper）<ul><li>一般使用BeanPropertyRowMapper实现类，可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)<ul><li>注意：new BeanPropertyRowMapper&lt;类型&gt;(类型.class)采用空参的构造函数</li></ul></li></ul></li></ul></li><li><p>queryForObject()：查询结果将结果集封装为对象</p><ul><li>一般用于聚合函数的查询</li><li>参数：（sql，类型.class）期望返回的数据类型</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础及对象详解</title>
      <link href="/2020/03/01/jdbc-ji-chu-ji-dui-xiang-xiang-jie/"/>
      <url>/2020/03/01/jdbc-ji-chu-ji-dui-xiang-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC：Java DataBase Connectivity Java数据库连接</p><ul><li><p>JDBC：SUN公司定义的一套操作所有关系型数据库的规则（接口），各个数据库厂商提供JDBC的实现类（数据库驱动），我们可以使用这套接口来编程，真正执行的代码是驱动jar包中的实现类。</p></li><li><p>使用JDBC  </p></li></ul><p>1.导入驱动jar包<br>2.注册驱动<br>3.获取数据库连接对象 Connection<br>4.定义sql<br>5.获取执行sql语句的对象 Statement<br>6.执行sql，接受返回结果<br>7.处理结果<br>8.释放资源</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册jdbc驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取数据库的连接对象</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db4"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义sql语句</span>        String sql<span class="token operator">=</span><span class="token string">"update stu set score = 56 where id = 1"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取执行对象statement</span>        Statement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果编译器报错了<br><img src="/2020/03/01/jdbc-ji-chu-ji-dui-xiang-xiang-jie/%E9%94%99%E8%AF%AF.png" alt="错误.png"></p><p>出现这个的原因是因为 mysql返回的时间总是有问题，比实际时间要早8小时。<br>在使用数据库加上代码</p><pre class=" language-java"><code class="language-java">Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db4?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8</p><h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><ul><li><p>DriverManager：驱动管理对象</p><ul><li>注册驱动（告诉程序应该使用哪一个数据库驱动）： com.mysql.cj.jdbc.Driver类中存在静态代码块调用DriverManager对象的registerDriver()函数来注册驱动</li><li>获取数据库连接：static Connection getConnection(String url,String user,String password);  <ul><li>rul：指定连接的路径（jdbc:mysql://ip地址(域名):端口号/数据库名称）  </li></ul></li></ul></li><li><p>Connection：数据库连接对象</p><ul><li>获取执行sql对象:  <ul><li>Statement createStatement()</li><li>PreparedStatement perparestatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：setAutoCommit(boolean autoCommit) :设置参数为false，则为开启事务</li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ul></li><li><p>Statement：执行sql对象</p><ul><li>boolean execute(String sql)：可以执行任意的sql</li><li>int execute(String sql)：执行DML(insert,update,delete)语句，DDL(create,alter,drop)语句，返回值为影响的表中数据行数</li><li>ResultSet executeQuery(String sql)：执行难DQL(select)语句</li></ul></li><li><p>ResultSet：结果集对象，封装查询结果</p><ul><li>boolean next()：游标向下移动一行,如果下一行有数据则返回true，否则返回false</li><li>getXXX(参数)：获取数据，如int getInt(),String getString()<ul><li>参数：int 代表列的编号（从1开始），String：代表列的名称</li></ul></li></ul></li><li><p>PreparedStatement：执行sql的对象</p><ul><li><p>此方法可以解决sql的注入问题：在拼接sql时，有一些特殊的关键字参与字符串的拼接会造成安全问题</p><ul><li>例如登陆时输入密码  a’ or ‘a’ = ‘a</li><li>那么sql语句经过拼接之后<br>select * from user where username = ‘sjad’ and password = ‘a’ or ‘a’=’a’;</li></ul></li><li><p>解决sql注入问题，使用PreparedStatement对象</p><ul><li>预编译的sql使用 ? 作为占位符</li><li>获取PerparedStatement对象时，sql作为参数</li><li>获取对象之后使用setXXX(),来给 ? 赋值</li><li>执行sql语句不需要传递参数</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>x<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>MysqlxDatatypes<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    *异常处理    *资源释放    *    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection root <span class="token operator">=</span>null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span>null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册数据库</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取数据库连接对象</span>            root <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db4?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"9624988464..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from stu "</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行sql对象</span>            st <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql,得到结果集对象</span>            resultSet <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析结果集</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> score <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="抽取JDBC工具类：JDBCUtils"><a href="#抽取JDBC工具类：JDBCUtils" class="headerlink" title="抽取JDBC工具类：JDBCUtils"></a>抽取JDBC工具类：JDBCUtils</h2><ul><li><p>目的：简化书写，获取连接对象及释放资源的代码大量且重复</p></li><li><p>分析：</p><ul><li>抽取注册驱动</li><li>抽取一个方法获取连接对象<ul><li>配置文件  jdbc.properties</li></ul></li><li>抽取一个方法释放资源</li></ul><hr></li><li><p>jdbc.properties</p></li></ul><pre class=" language-txt"><code class="language-txt">driver=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/db4?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=falseuser=rootpassword=9624988464...</code></pre><ul><li>JDBCUtils.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读取配置文件</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/JDBC/jdbc.perperties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取参数</span>            driver<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement st<span class="token punctuation">,</span>Connection co<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>co <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                co<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet re<span class="token punctuation">,</span>Statement st<span class="token punctuation">,</span> Connection co<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                re<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>co <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                co<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>JDBCDemo4.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo4</span><span class="token operator">&lt;</span>list<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JdbcDemo4 jdbcDemo4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> jdbcDemo4<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>students<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>students<span class="token operator">></span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册驱动,获取连接对象</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from stu"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析结果</span>            students st <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> score <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date birthday <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">students</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>                stus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> stus<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解实战：简单的测试框架</title>
      <link href="/2020/02/22/zi-ding-yi-zhu-jie-shi-zhan-jian-dan-de-ce-shi-kuang-jia/"/>
      <url>/2020/02/22/zi-ding-yi-zhu-jie-shi-zhan-jian-dan-de-ce-shi-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="注解基础"><a href="#注解基础" class="headerlink" title="注解基础"></a>注解基础</h2><p>注解的本质是一个接口，该接口默认继承Annotation接口</p><ul><li>接口里面的成员方法称为注解的属性</li><li>定义了属性，要在使用的时候给属性赋值</li><li>如果定义属性时使用default关键字给属性默认初始值，则可以不进行赋值</li><li>若只有一个属性且名为value，则使用时可以直接写值</li><li>数组赋值时使用 { } 包裹，数组只有一个值时可以不用 { }</li></ul><p>属性返回值的类型限制：</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul><p>1.JDK中预定义注解</p><ul><li>@Override ：继承父类接口</li><li>@Deprecated ：表示已过时的内容</li><li>@SuppressWarning ：压制警告，一般传递参数为all，SuppressWarning(“all”)</li></ul><p>2.自定义注解</p><ul><li>元注解：用于描述注解的注解<ul><li>@Target ：描述注解能够作用的位置</li><li>@Retention ： 描述注解被保留的阶段</li><li>@Documented ： 描述注解是否被抽取到api文档中</li><li>@Inherited ： 描述注解是否被子类继承</li></ul></li></ul><h2 id="利用注解来测试所写的方法中出现的异常"><a href="#利用注解来测试所写的方法中出现的异常" class="headerlink" title="利用注解来测试所写的方法中出现的异常"></a>利用注解来测试所写的方法中出现的异常</h2><p>在这里注解只是作为标识，检测程序只对带有Check的函数进行检测<br>测试结果：<br><img src="/2020/02/22/zi-ding-yi-zhu-jie-shi-zhan-jian-dan-de-ce-shi-kuang-jia/bug.png" alt="bug.png"></p><ul><li>写好我们需要测试的类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> check<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1+0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1*0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1/0="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>自定义Check注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> check<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>编写测试主函数</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> check<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *检测被加了Check注解的方法 * 并把异常信息输出 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCheck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Calculator c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取字节码文件</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取成员方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录出现异常的次数</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"bug.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method<span class="token operator">:</span>methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断方法上是否有Check注解</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Check<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是，运行</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//捕获异常</span>                    <span class="token comment" spellcheck="true">//记录文件信息</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"出现了异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的名称："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的原因："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"一共出现了"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"次异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Java </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考复习</title>
      <link href="/2020/02/06/ruan-kao-fu-xi/"/>
      <url>/2020/02/06/ruan-kao-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成与体系结构"><a href="#计算机组成与体系结构" class="headerlink" title="计算机组成与体系结构"></a>计算机组成与体系结构</h2><h3 id="计算机体系结构分类——Flynn"><a href="#计算机体系结构分类——Flynn" class="headerlink" title="计算机体系结构分类——Flynn"></a>计算机体系结构分类——Flynn</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB-Flynn.png" alt="计算机体系结构分类-Flynn.png"></p><ul><li>单指令流单数据流：单处理器系统，老式PC机，多见于单片机系统。</li><li>阵列处理机（典型单指令流多数据流代表）：适合处理数组类型的操作，例如：一条加法指令通过输入不同数据来得到一组结果。</li><li>多指令单数据流是一种理论层次的模型。</li><li>多指令流多数据流：当前很常见，例如集群式。</li></ul><h3 id="CISC与RISC"><a href="#CISC与RISC" class="headerlink" title="CISC与RISC"></a>CISC与RISC</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/CISC%E4%B8%8ERISC.png" alt="CISC与RISC.png"></p><ul><li>CISC：在计算机还没普及的情况下提出来的，计算机属于奢饰品，找厂商定制计算机，从硬件到指令系统都是定制，要进行什么样的业务处理就设计什么样的指令。根据不同的用户就会有不同的指令，而且指令的数量会相当多。</li></ul><h3 id="流水线——概念"><a href="#流水线——概念" class="headerlink" title="流水线——概念"></a>流水线——概念</h3><ul><li>数字1代表第一个指令，数字2代表第二个指令</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF.png" alt="流水线.png"></p><ul><li>流水线的计算</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AE%A1%E7%AE%97.png" alt="流水线计算.png"></p><ul><li>流水线吞吐率的计算</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%90%9E%E5%90%90%E7%8E%87%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt="流水线吞吐的率计算.png"></p><ul><li>流水线的加速比</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E5%8A%A0%E9%80%9F%E6%AF%94.png" alt="流水线的加速比.png"></p><ul><li>流水线的效率</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%95%88%E7%8E%87.png" alt="流水线的效率.png"></p><h3 id="层次化存储结构"><a href="#层次化存储结构" class="headerlink" title="层次化存储结构"></a>层次化存储结构</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%B1%82%E6%AC%A1%E5%8C%96%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="层次化存储结构.png"></p><ul><li>Cache不是必须的，CPU可以直接与内存进行交换，但是没有Cache的话，因为局部性原理（如循环体中的程序会暂时保存在Cache中，以便CPU快速读取）速度会极慢。</li><li>按内容存取区别按地址存取</li></ul><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/Cache.png" alt="Cache.png"></p><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86.png" alt="局部性原理.png"></p><ul><li>工作集原理：工作集是进程运行时被频繁访问的页面的集合。</li></ul><h3 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h3><ul><li>主存分类</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E4%B8%BB%E5%AD%98%E5%88%86%E7%B1%BB.png" alt="主存分类.png"></p><ul><li>主存编址</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E4%B8%BB%E5%AD%98%E7%BC%96%E5%9D%80.png" alt="主存编址.png"></p><h3 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84.png" alt="磁盘结构.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/%E7%A3%81%E7%9B%98%E8%AF%95%E9%A2%98.png" alt="磁盘试题.png"></p><h3 id="计算机总线"><a href="#计算机总线" class="headerlink" title="计算机总线"></a>计算机总线</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%80%BB%E7%BA%BF.png" alt="总线.png"></p><h3 id="系统可靠性分析——串联系统与并联系统"><a href="#系统可靠性分析——串联系统与并联系统" class="headerlink" title="系统可靠性分析——串联系统与并联系统"></a>系统可靠性分析——串联系统与并联系统</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E4%B8%B2%E8%81%94%E7%B3%BB%E7%BB%9F.png" alt="串联系统.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%B9%B6%E8%81%94%E7%B3%BB%E7%BB%9F.png" alt="并联系统.png"></p><h3 id="系统可靠性分析——n模冗余系统与混合系统"><a href="#系统可靠性分析——n模冗余系统与混合系统" class="headerlink" title="系统可靠性分析——n模冗余系统与混合系统"></a>系统可靠性分析——n模冗余系统与混合系统</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E5%86%97%E4%BD%99%E7%B3%BB%E7%BB%9F.png" alt="冗余系统.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%B7%B7%E5%90%88%E7%B3%BB%E7%BB%9F.png" alt="混合系统.png"></p><h3 id="差错控制——CRC与海明校验码"><a href="#差错控制——CRC与海明校验码" class="headerlink" title="差错控制——CRC与海明校验码"></a>差错控制——CRC与海明校验码</h3><p><img src="/2020/02/06/ruan-kao-fu-xi/%E7%BC%96%E7%A0%81.png" alt="编码.png"></p><ul><li>循环校验码CRC（能检错不能纠错）</li></ul><p><img src="/2020/02/06/ruan-kao-fu-xi/%E6%A8%A12%E9%99%A4%E6%B3%95.png" alt="模2除法.png"></p><p><img src="/2020/02/06/ruan-kao-fu-xi/CRC%E7%BC%96%E7%A0%81.png" alt="CRC编码.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记：自动化构建工具Maven</title>
      <link href="/2020/01/29/bi-ji-zi-dong-hua-gou-jian-gong-ju-maven/"/>
      <url>/2020/01/29/bi-ji-zi-dong-hua-gou-jian-gong-ju-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h2><ul><li>借助Maven可以将一个项目拆分为多个工程，避免因为项目太庞大不好管理和分工合作</li><li>借助Maven可以将jar包紧紧保存在“仓库”中，有需要工程“引用”这个文件接口，并不需要真的把jar包复制过来</li><li>下载jar包（可以以一种规范的方式下载jar包，因为所有的知名框架或者第三方工具的jar包以及按照统一的规范的方式下载jar包，内容也是可靠的）</li><li>Maven会自动将被依赖的jar包导入进来</li></ul><h2 id="构建过程中的环节"><a href="#构建过程中的环节" class="headerlink" title="构建过程中的环节"></a>构建过程中的环节</h2><ul><li>清理：将以前编译的得到的旧的class字节码文件删除，为下一次编译做准备</li><li>编译：将JAVA源程序编译成class字节码文件</li><li>测试：自动测试，自动调用junit程序</li><li>报告：测试程序执行的结果</li><li>打包：动态web工程打包成war包，java工程打包成jar包</li><li>安装：Maven特定的概念－－将打包得到的文件复制到“仓库”中指定位置</li><li>部署：将动态web工程生成war包复制到servlet容器的指定目录下，使其可以运行</li></ul><h2 id="Maven的核心概念"><a href="#Maven的核心概念" class="headerlink" title="Maven的核心概念"></a>Maven的核心概念</h2><ul><li><strong>约定的目录结构</strong></li><li><strong>POM</strong></li><li><strong>坐标</strong></li><li><strong>依赖</strong></li><li>仓库</li><li>生命周期/插件/目标</li><li>继承</li><li>聚合</li></ul><h2 id="约定的目录结构"><a href="#约定的目录结构" class="headerlink" title="约定的目录结构"></a>约定的目录结构</h2><ul><li>根目录：工程名</li><li>src目录：源码</li><li>pom.xml文件：Maven工程的核心配置文件</li><li>main目录：存放主程序</li><li>test目录：存放测试程序</li><li>java目录：存放java源文件</li><li>resource目录：存放框架或其他工具的配置文件</li></ul><h3 id="如果想要自己定义的东西让工具知道，有两种办法"><a href="#如果想要自己定义的东西让工具知道，有两种办法" class="headerlink" title="如果想要自己定义的东西让工具知道，有两种办法"></a>如果想要自己定义的东西让工具知道，有两种办法</h3><ul><li>以配置的方式告诉框架</li><li>遵守框架内部已经存在的约定</li><li>约定＞配置＞编码</li></ul><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><ul><li>mvn clean：清理</li><li>mvn compile：编译主程序</li><li>mvn test-compile：编译测试程序</li><li>mvn test：执行测试</li><li>mvn package：打包</li><li>mvn install：安装</li><li>mvn site：生成站点</li></ul><h2 id="关于联网的问题"><a href="#关于联网的问题" class="headerlink" title="关于联网的问题"></a>关于联网的问题</h2><ul><li>Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含在Maven的核心程序中。</li><li>在我们执行的Maven命令中需要用到某些插件时，Maven的核心程序会首先到本地仓库中寻找。</li><li>本地仓库的默认位置：[系统中当前用户的家目录]\.m2\repository</li><li>Maven核心程序如果在本地仓库中找不到需要的插件，那么它会链接外网，到中央仓库去下载。如果此时无法连接外网，则构建失败。</li><li>修改默认本地仓库的位置可以让Maven的核心程序找到我们事先准备好的目录</li></ul><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><ul><li>含义：Project Object Model：项目对象模型<br>类似 DOM ：Document Object Model：文档对象类型</li><li>pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。需要程度相当于web.xml对于动态web工程</li></ul><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><p>含义：使用三个向量在仓库中唯一定位一个Maven工程</p><ul><li>groupid:公司或组织域名倒序+项目名</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupid</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupid</span><span class="token punctuation">></span></span></code></pre><ul><li>artifactid：模块名</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactid</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span><span class="token punctuation">></span></span></code></pre><ul><li>version:版本</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><h3 id="Maven-工程的坐标与仓库中路径的对应关系"><a href="#Maven-工程的坐标与仓库中路径的对应关系" class="headerlink" title="Maven 工程的坐标与仓库中路径的对应关系"></a>Maven 工程的坐标与仓库中路径的对应关系</h3><ul><li>坐标：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupid</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactid</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><p>对应文件：</p><p>org/springfarmework/spring-core/4.0.00RELEASE/spring-core-4.0.0.RELEASE.jar</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="仓库中保存的内容：Maven工程"><a href="#仓库中保存的内容：Maven工程" class="headerlink" title="仓库中保存的内容：Maven工程"></a>仓库中保存的内容：Maven工程</h3><ul><li>Maven自身所需要的插件</li><li>第三方框架或工具的jar包</li><li>我们自己开发的Maven工程</li></ul><h3 id="仓库的分类"><a href="#仓库的分类" class="headerlink" title="仓库的分类"></a>仓库的分类</h3><p>1.本地仓库：当前电脑上部署的目录，为当前电脑上所有Maven工程服务。</p><p>2.远程仓库</p><ul><li>私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务。</li><li>中央仓库：架设在Internet上，为全世界所有的Maven工程服务。</li><li>中央仓库镜像：为了分担中央仓库的流量，提升用户的访问速度。</li></ul><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>1.Maven解析依赖信息时会到本地仓库中查找被依赖的jar包。</p><ul><li>对于我们自己开发的Maven工程，使用 mvn install命令安装后就可以进入仓库。</li></ul><p>2.依赖的常用范围</p><ul><li>compile范围依赖：对主程序有效、对测试程序有效、参与打包。</li><li>test范围依赖：对主程序无效、对测试程序有效、不产与打包。（典型例子：junit）</li><li>provided范围依赖：对主程序有效、对测试程序有效、不参与打包、不参与部署。（典型例子：servlet-api）</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>各个构建环节执行的顺序：不能打乱顺序，必须按照规定的争取顺序来进行。</li><li>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。</li><li>Maven的核心程序为了更好的实现自动化，按照这样的特点执行生命周期中的各个阶段： 不论现在要执行生命周期中的哪一个阶段，都是从生命周期最初的位置执行。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 构建 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/29/hello-world/"/>
      <url>/2020/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
